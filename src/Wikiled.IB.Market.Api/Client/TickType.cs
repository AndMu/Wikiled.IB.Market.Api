namespace Wikiled.IB.Market.Api.Client
{
    /**
    * @brief - DOC_TODO
    */
    public class TickType
    {
        public const int BidSize = 0;
        public const int Bid = 1;
        public const int Ask = 2;
        public const int AskSize = 3;
        public const int Last = 4;
        public const int LastSize = 5;
        public const int High = 6;
        public const int Low = 7;
        public const int Volume = 8;
        public const int Close = 9;
        public const int BidOption = 10;
        public const int AskOption = 11;
        public const int LastOption = 12;
        public const int ModelOption = 13;
        public const int Open = 14;
        public const int Low13Week = 15;
        public const int High13Week = 16;
        public const int Low26Week = 17;
        public const int High26Week = 18;
        public const int Low52Week = 19;
        public const int High52Week = 20;
        public const int AvgVolume = 21;
        public const int OpenInterest = 22;
        public const int OptionHistoricalVol = 23;
        public const int OptionImpliedVol = 24;
        public const int OptionBidExch = 25;
        public const int OptionAskExch = 26;
        public const int OptionCallOpenInterest = 27;
        public const int OptionPutOpenInterest = 28;
        public const int OptionCallVolume = 29;
        public const int OptionPutVolume = 30;
        public const int IndexFuturePremium = 31;
        public const int BidExch = 32;
        public const int AskExch = 33;
        public const int AuctionVolume = 34;
        public const int AuctionPrice = 35;
        public const int AuctionImbalance = 36;
        public const int MarkPrice = 37;
        public const int BidEfpComputation = 38;
        public const int AskEfpComputation = 39;
        public const int LastEfpComputation = 40;
        public const int OpenEfpComputation = 41;
        public const int HighEfpComputation = 42;
        public const int LowEfpComputation = 43;
        public const int CloseEfpComputation = 44;
        public const int LastTimestamp = 45;
        public const int Shortable = 46;
        public const int FundamentalRatios = 47;
        public const int RtVolume = 48;
        public const int Halted = 49;
        public const int BidYield = 50;
        public const int AskYield = 51;
        public const int LastYield = 52;
        public const int CustOptionComputation = 53;
        public const int TradeCount = 54;
        public const int TradeRate = 55;
        public const int VolumeRate = 56;
        public const int LastRthTrade = 57;
        public const int RtHistoricalVol = 58;
        public const int IbDividends = 59;
        public const int BondFactorMultiplier = 60;
        public const int RegulatoryImbalance = 61;
        public const int NewsTick = 62;
        public const int ShortTermVolume3Min = 63;
        public const int ShortTermVolume5Min = 64;
        public const int ShortTermVolume10Min = 65;
        public const int DelayedBid = 66;
        public const int DelayedAsk = 67;
        public const int DelayedLast = 68;
        public const int DelayedBidSize = 69;
        public const int DelayedAskSize = 70;
        public const int DelayedLastSize = 71;
        public const int DelayedHigh = 72;
        public const int DelayedLow = 73;
        public const int DelayedVolume = 74;
        public const int DelayedClose = 75;
        public const int DelayedOpen = 76;
        public const int RtTrdVolume = 77;
        public const int CreditmanMarkPrice = 78;
        public const int CreditmanSlowMarkPrice = 79;
        public const int DelayedBidOption = 80;
        public const int DelayedAskOption = 81;
        public const int DelayedLastOption = 82;
        public const int DelayedModelOption = 83;
        public const int LastExch = 84;
        public const int LastRegTime = 85;
        public const int FuturesOpenInterest = 86;
        public const int AvgOptVolume = 87;
        public const int DelayedLastTimestamp = 88;

        public static string GetField(int tickType)
        {
            switch (tickType)
            {
                case BidSize: return "bidSize";
                case Bid: return "bidPrice";
                case Ask: return "askPrice";
                case AskSize: return "askSize";
                case Last: return "lastPrice";
                case LastSize: return "lastSize";
                case High: return "high";
                case Low: return "low";
                case Volume: return "volume";
                case Close: return "close";
                case BidOption: return "bidOptComp";
                case AskOption: return "askOptComp";
                case LastOption: return "lastOptComp";
                case ModelOption: return "modelOptComp";
                case Open: return "open";
                case Low13Week: return "13WeekLow";
                case High13Week: return "13WeekHigh";
                case Low26Week: return "26WeekLow";
                case High26Week: return "26WeekHigh";
                case Low52Week: return "52WeekLow";
                case High52Week: return "52WeekHigh";
                case AvgVolume: return "AvgVolume";
                case OpenInterest: return "OpenInterest";
                case OptionHistoricalVol: return "OptionHistoricalVolatility";
                case OptionImpliedVol: return "OptionImpliedVolatility";
                case OptionBidExch: return "OptionBidExchStr";
                case OptionAskExch: return "OptionAskExchStr";
                case OptionCallOpenInterest: return "OptionCallOpenInterest";
                case OptionPutOpenInterest: return "OptionPutOpenInterest";
                case OptionCallVolume: return "OptionCallVolume";
                case OptionPutVolume: return "OptionPutVolume";
                case IndexFuturePremium: return "IndexFuturePremium";
                case BidExch: return "bidExch";
                case AskExch: return "askExch";
                case AuctionVolume: return "auctionVolume";
                case AuctionPrice: return "auctionPrice";
                case AuctionImbalance: return "auctionImbalance";
                case MarkPrice: return "markPrice";
                case BidEfpComputation: return "bidEFP";
                case AskEfpComputation: return "askEFP";
                case LastEfpComputation: return "lastEFP";
                case OpenEfpComputation: return "openEFP";
                case HighEfpComputation: return "highEFP";
                case LowEfpComputation: return "lowEFP";
                case CloseEfpComputation: return "closeEFP";
                case LastTimestamp: return "lastTimestamp";
                case Shortable: return "shortable";
                case FundamentalRatios: return "fundamentals";
                case RtVolume: return "RTVolume";
                case Halted: return "halted";
                case BidYield: return "bidYield";
                case AskYield: return "askYield";
                case LastYield: return "lastYield";
                case CustOptionComputation: return "custOptComp";
                case TradeCount: return "trades";
                case TradeRate: return "trades/min";
                case VolumeRate: return "volume/min";
                case LastRthTrade: return "lastRTHTrade";
                case RtHistoricalVol: return "RTHistoricalVol";
                case IbDividends: return "IBDividends";
                case BondFactorMultiplier: return "bondFactorMultiplier";
                case RegulatoryImbalance: return "regulatoryImbalance";
                case NewsTick: return "newsTick";
                case ShortTermVolume3Min: return "shortTermVolume3Min";
                case ShortTermVolume5Min: return "shortTermVolume5Min";
                case ShortTermVolume10Min: return "shortTermVolume10Min";
                case DelayedBid: return "delayedBid";
                case DelayedAsk: return "delayedAsk";
                case DelayedLast: return "delayedLast";
                case DelayedBidSize: return "delayedBidSize";
                case DelayedAskSize: return "delayedAskSize";
                case DelayedLastSize: return "delayedLastSize";
                case DelayedHigh: return "delayedHigh";
                case DelayedLow: return "delayedLow";
                case DelayedVolume: return "delayedVolume";
                case DelayedClose: return "delayedClose";
                case DelayedOpen: return "delayedOpen";
                case RtTrdVolume: return "rtTrdVolume";
                case CreditmanMarkPrice: return "creditmanMarkPrice";
                case CreditmanSlowMarkPrice: return "creditmanSlowMarkPrice";
                case DelayedBidOption: return "delayedBidOptComp";
                case DelayedAskOption: return "delayedAskOptComp";
                case DelayedLastOption: return "delayedLastOptComp";
                case DelayedModelOption: return "delayedModelOptComp";
                case LastExch: return "lastExchange";
                case LastRegTime: return "lastRegTime";
                case FuturesOpenInterest: return "futuresOpenInterest";
                case AvgOptVolume: return "avgOptVolume";
                case DelayedLastTimestamp: return "delayedLastTimestamp";

                default: return "unknown";
            }
        }
    }
}